def read_errors(obs, eval_models, regions, seasons, out_path, eval_path, n_implemented_var, verbose):
    '''
    Read previously calculated error metrics from CSV files for model evaluation.
    
    This function reads error metrics from CSV files generated by the write_errors 
    function. These metrics represent the performance of reference models against 
    observations and are used to calculate relative performance indices for the 
    models being evaluated.
    
    Parameters
    ----------
    obs : list
        List of variable objects representing observations
    eval_models : list
        List of climate_model objects used as reference for evaluation
    regions : list
        List of region objects defining geographical areas for evaluation
    seasons : list
        List of seasons to evaluate (e.g., ['DJF', 'MAM', 'JJA', 'SON'])
    out_path : str
        Path to directory containing this run's output files
    eval_path : str
        Path to directory containing evaluation reference data
    n_implemented_var : int
        Number of variables currently implemented in the tool
    verbose : bool
        Whether to print detailed information during execution
        
    Returns
    -------
    eval_error_mean : dict
        Dictionary of error values for reference models, organized by
        variable name, region name, model name, level/depth, and season
        
    Notes
    -----
    The function expects CSV files in a specific format with columns for:
    - Variable name
    - Region name
    - Level/depth
    - Season
    - Absolute mean error value
    
    The n_implemented_var parameter is important as it determines how many
    variables to read from the CSV files, even if some are not actively used
    in the current analysis.
    
    Examples
    --------
    >>> eval_error_mean = read_errors(obs, eval_models, regions, seasons, 
    ...                              'output/', 'eval/ERA5/', 14, verbose=True)
    
    AUTHORS:
    Jan Streffing               2022-11-30      Split off from main tool
    '''

    import csv
    from tqdm import tqdm
    import numpy as np
    import pandas as pd
    import warnings
    from collections import OrderedDict


    print('Reading precalculated cmip6 field mean of errors from csv files')

    max_depth=0
    for var in obs:
        if len(var.depths) > max_depth:
            max_depth = len(var.depths)

    regions_names = []
    for region in regions:
        regions_names.append(region.name)
        
    collect = np.empty([len(eval_models),n_implemented_var,len(regions),max_depth,len(seasons)])*np.nan
    i=0
    for eval_model in tqdm(eval_models):
        df = pd.read_csv(eval_path+eval_model.name+'.csv', delimiter=' ')
        values = df['AbsMeanError']
        regions_csv = df['Region']
        var_csv = df['Variable']
        season_csv = df['Season']
        j=0
        r=0
        for var in obs:
            k=0
            a=(df['Variable']==var.name).to_list()
            if verbose:
                if any(a): # Check if variable appears in list. If not, skip it.
                    print('reading: ',eval_model.name,var.name)
                else:
                    print('filling: ',eval_model.name,var.name)

            for region in regions:
                l=0
                for depth in var.depths:
                    m=0
                    for seas in seasons:
                        if any(a): # Check if variable appears in csv. If not, skip it.
                            if regions_csv[r] not in regions_names: # Check if region from csv part of the analysis. Else advance
                                while True:
                                    r+=1
                                    if regions_csv[r] in regions_names:
                                        break
                            if season_csv[r] not in seasons: # Check if region from csv part of the analysis. Else advance
                                while True:
                                    r+=1
                                    if season_csv[r] in seasons:
                                        break
                            if verbose:
                                print(eval_model.name,var.name,region.name,depth,seas,values[r])
                            collect[i,j,k,l,m]=values[r]
                            r+=1
                        m+=1
                    l+=1
                k+=1
            j+=1
        i+=1
    # Ignoring non useful warning:
    # /tmp/ipykernel_19478/363568120.py:37: RuntimeWarning: Mean of empty slice
    #  ensmean=np.nanmean(collect,axis=0)
    with warnings.catch_warnings():
        warnings.simplefilter("ignore", category=RuntimeWarning)
        ensmean=np.nanmean(collect,axis=0)


    print('Placing sums of error into easier to inspect dictionary')

    eval_error_mean = OrderedDict()

    j=0
    for var in obs:
        k=0
        for region in regions:
            l=0
            for depth in var.depths:
                m=0
                for seas in seasons:
                    eval_error_mean[var.name,region.name,depth,seas]=ensmean[j,k,l,m]
                    m+=1
                l+=1
            k+=1
        j+=1

    return eval_error_mean
